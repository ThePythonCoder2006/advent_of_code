#define __USE_MINGW_ANSI_STDIO 1

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>
#include <errno.h>
#include <stdbool.h>
#include <curses.h>
#include <time.h>
#include <windows.h>

// #define TEST
// #define DEBUG

#ifndef TEST
#define INPUT "input.txt"
#define GRAPH_COLS (162)
#define GRAPH_ROWS (41)
#else
#define INPUT "test_input.txt"
#define GRAPH_COLS (8)
#define GRAPH_ROWS (5)
#endif

#define PATH_MAX_SIZE 1024

#define INF UINT16_MAX

#define VISITED 0x1
#define PATH 0x2
#define IS_VISITED(v) ((v.bools | VISITED) == v.bools)
#define IS_PATH(v) ((v.bools | PATH) == v.bools)

#define NODE_POS_UNDEF (-1)
typedef struct
{
	int16_t x, y;
} node_pos;

typedef struct node
{
	uint16_t d;
	uint8_t bools;
	node_pos prev;
} vertex;

typedef vertex graph[GRAPH_COLS][GRAPH_ROWS];

graph grid;

typedef struct
{
	node_pos *c;
	uint16_t size, count;
} set;

#define SET_INIT_SIZE 32
set open;

char height[GRAPH_COLS][GRAPH_ROWS];

void init_grid(graph *grid);
void print_grid(void);
void print_walls(void);

int set_add(set *set, const node_pos ele);
int set_rem(set *set, const node_pos ele);
int set_init(set *set);
int set_clear(set *set);
void set_print(const set set);
int set_in(const set set, const node_pos ele);

node_pos get_min(const set open);

#define GET_GRID(pos) (grid[pos.x][pos.y])

#define PAIR_GREEN 1
#define PAIR_RED 2
#define PAIR_BLUE 3
#define PAIR_YELLOW 4

int main(int argc, char **argv)
{
	(void)argc;
	(void)argv;

	init_grid(&grid);

	set_init(&open);

	FILE *f = fopen("../" INPUT, "r");
	if (f == NULL)
	{
		fprintf(stderr, "couln't open file %s : %s", INPUT, strerror(errno));
		return EXIT_FAILURE;
	}

#ifndef DEBUG
	initscr();
	start_color(); /* Start color 			*/
	init_pair(PAIR_GREEN, COLOR_GREEN, COLOR_BLACK);
	init_pair(PAIR_RED, COLOR_RED, COLOR_BLACK);
	init_pair(PAIR_BLUE, COLOR_BLUE, COLOR_BLACK);
	init_pair(PAIR_YELLOW, COLOR_YELLOW, COLOR_BLACK);
#endif

	node_pos start = {NODE_POS_UNDEF, NODE_POS_UNDEF}, end = {NODE_POS_UNDEF, NODE_POS_UNDEF};

	/* reading the height data from file */
	char tmp;
	for (int16_t y = (GRAPH_ROWS - 1); y >= 0; --y)
	{
		for (int16_t x = 0; x < GRAPH_COLS; ++x)
		{
			tmp = fgetc(f);
#ifndef DEBUG
			addch(tmp);
#endif

			if (tmp == 'S')
			{
				start.x = x, start.y = y;
				height[x][y] = 'a';
				continue;
			}
			if (tmp == 'E')
			{
				end.x = x, end.y = y;
				height[x][y] = 'z';
				continue;
			}

			height[x][y] = tmp;
		}
		tmp = fgetc(f);
#ifndef DEBUG
		addch('\n');
#endif
	}

	refresh();

	fclose(f);

	// add the start
	GET_GRID(start).d = 0;
	set_add(&open, start);

	// starting solving
	node_pos u = {0, 0};
	while (1)
	{
		u = get_min(open);

		if (u.x == NODE_POS_UNDEF && u.y == NODE_POS_UNDEF)
		{
			set_print(open);
			printf("no more nodes in the set...\n");
			break;
		}

		set_rem(&open, u);

		if (u.x == end.x && u.y == end.y)
			break;

		GET_GRID(u).bools |= VISITED;

		// for all neighbors
		for (int8_t i = -1; i <= 1; ++i)
			for (int8_t j = -1; j <= 1; ++j)
			{
				// do not allow diagonal movement
				if (abs(i) == abs(j))
					continue;

				// v : the node that is being examined
				const node_pos v = {u.x + i, u.y + j};

				// if the position is outside of the grid : next node
				if (v.x < 0 || v.x >= GRAPH_COLS || v.y < 0 || v.y >= GRAPH_ROWS)
					continue;

				// if the node was already visited or is a wall: next node
				if (IS_VISITED(GET_GRID(v)) || (height[v.x][v.y] > height[u.x][u.y] + 1))
					continue;

				set_add(&open, v);

				if (GET_GRID(u).d + 1 < GET_GRID(v).d)
				{
					GET_GRID(v).d = GET_GRID(u).d + 1; // adding one because all of the nodes are at the same distance : 1
					GET_GRID(v).prev = u;
				}
			}
	}

	/* --- reconstructing the path --- */

	u = end;

	// if there is no previous node before end => end was not reach => it is unreachable => exit
	if (GET_GRID(u).prev.x == NODE_POS_UNDEF || GET_GRID(u).prev.y == NODE_POS_UNDEF)
	{
		fprintf(stderr, "there is no path between start and end...\n");
		return 1;
	}

	while (u.x != NODE_POS_UNDEF && u.y != NODE_POS_UNDEF)
	{
		GET_GRID(u).bools |= PATH;
		u = GET_GRID(u).prev;
	}

#ifndef DEBUG
	mvprintw(GRAPH_ROWS, GRAPH_COLS, "\n\nthe shortest ditance from start to end is %" PRIu16 "\n\n", GET_GRID(end).d);
#endif

	/* --- printing the grid --- */

#ifndef DEBUG
	for (int16_t y = (GRAPH_ROWS - 1); y >= 0; --y)
		for (int16_t x = 0; x < GRAPH_COLS; ++x)
			if (IS_PATH(grid[x][y]))
				mvchgat(GRAPH_ROWS - 1 - y, x, 1, 0, 1, NULL);

	getch();
#endif

	set_clear(&open);

	return EXIT_SUCCESS;
}

void init_grid(graph *grid)
{
	const vertex basic = {.d = INF, .bools = 0, .prev = {NODE_POS_UNDEF, NODE_POS_UNDEF}};

	for (uint16_t x = 0; x < GRAPH_ROWS; ++x)
		for (uint16_t y = 0; y < GRAPH_COLS; ++y)
			(*grid)[y][x] = basic;
}

void print_walls(void)
{
	for (int16_t y = (GRAPH_ROWS - 1); y >= 0; --y)
	{
		for (uint16_t x = 0; x < GRAPH_COLS; ++x)
			putchar(height[x][y]);
		putchar('\n');
	}
	return;
}

node_pos get_min(const set open_set)
{
	node_pos node = {NODE_POS_UNDEF, NODE_POS_UNDEF};
	uint16_t min = INF;

	if (open_set.count == 0 || open_set.size == 0)
		return node;

	for (uint16_t i = 0; i < open_set.count; ++i)
	{
		const uint16_t dist = GET_GRID(open_set.c[i]).d;

		if (dist <= 1) // there should never be a node with distance 0, only the start has it, so 1 is the minimal distance
			return open_set.c[i];

		if (dist < min)
		{
			min = dist;
			node = open.c[i];
		}
	}

	return node;
}

int set_add(set *set, const node_pos ele)
{
	if (set_in(*set, ele))
		return 0;

	if (set->count >= set->size)
	{
		set->size *= 2; // multiply the size of the array by two
		node_pos *tmp_ptr = realloc(set->c, set->size * sizeof(*set->c));
		if (tmp_ptr == NULL)
			return 1;
		set->c = tmp_ptr;
	}

	set->c[set->count++] = ele;

	return 0;
}

int set_rem(set *set, const node_pos ele)
{
	if (set->count == 1)
	{
		set->c[0] = (node_pos){0, 0};
		--set->count;
		return 0;
	}
	for (uint16_t i = 0; i < set->size; ++i)
	{
		if (set->c[i].x == ele.x && set->c[i].y == ele.y)
		{
			set->c[i] = set->c[--set->count];
			set->c[set->count] = (node_pos){0, 0};
			break;
		}
	}

	return 0;
}

int set_init(set *set)
{
	set->count = 0;
	set->size = SET_INIT_SIZE;
	set->c = calloc(set->size, sizeof(*set->c));

	return 0;
}

int set_clear(set *set)
{
	free(set->c);

	set->count = 0;
	set->size = 0;

	return 0;
}

void set_print(const set set)
{
	for (uint16_t i = 0; i < set.size; ++i)
		printf("(%" PRId16 ", %" PRId16 "), ", set.c[i].x, set.c[i].y);

	return;
}

int set_in(const set set, const node_pos ele)
{
	for (uint16_t i = 0; i < set.count; ++i)
	{
		if (set.c[i].y == ele.y && set.c[i].x == ele.x)
			return 1;
	}
	return 0;
}